import asyncio import logging import os import sys import json import sqlite3 from pathlib import Path from telegram.ext import ApplicationBuilder, CommandHandler, ChatMemberHandler # Entry point and async main for bot development PROJECT_ROOT = Path(__file__).parent.parent CONFIG_PATH = PROJECT_ROOT / "config" / "config.json" LOGS_PATH = PROJECT_ROOT / "logs" / "bot.log" DB_PATH = PROJECT_ROOT / "config" / "allowed_groups.db" # --- Logging setup (rotating, simple) --- def setup_logger(): logging.basicConfig( level=logging.INFO, format="%(asctime)s | %(levelname)s | %(name)s | %(message)s", handlers=[ logging.FileHandler(LOGS_PATH), logging.StreamHandler(sys.stdout) ] ) logger = logging.getLogger("assetfetch_bot") return logger # --- Config loader --- def load_config(): # For first run, allow dev to use config.example.json as fallback try: with open(CONFIG_PATH, "r") as f: return json.load(f) except FileNotFoundError: try: with open(CONFIG_PATH.parent / "config.example.json", "r") as f: logging.warning("Falling back to example config! Please create config/config.json for production.") return json.load(f) except Exception as e: logging.error(f"Config load error: {e}") sys.exit(1) # --- SQLite DB check/connection --- def setup_db(): # For now, only ensure allowed_groups.db exists conn = sqlite3.connect(DB_PATH) c = conn.cursor() # Table is just a registry of allowed group IDs c.execute(""" CREATE TABLE IF NOT EXISTS groups ( group_id TEXT PRIMARY KEY, is_approved INTEGER DEFAULT 0, is_active INTEGER DEFAULT 0, subscription_plan TEXT DEFAULT 'default' ) """) conn.commit() conn.close() # --- PTB bot setup (hander scaffolding comes later) --- async def main(): logger = setup_logger() logger.info("Starting AssetFetch Pro...") config = load_config() setup_db() token = config.get("telegram_token") if not token: logger.error("No `telegram_token` found in configuration.") sys.exit(1) # Build PTB app, ready for handlers app = ApplicationBuilder().token(token).concurrent_updates(True).build() logger.info("Bot application created. Ready to add handlers.") #--- Register admin commands for group allow-list approval --- from src.commands.group_approve import ( groupapprove_command, allapprovedgroup_command, deletethisapprovedgroup_command, my_chat_member_handler ) app.add_handler(CommandHandler("groupapprove", groupapprove_command)) app.add_handler(CommandHandler("allapprovedgroup", allapprovedgroup_command)) app.add_handler(CommandHandler("deletethisapprovedgroup", deletethisapprovedgroup_command)) # Add chat member handler for auto-approval enforcement app.add_handler(ChatMemberHandler(my_chat_member_handler, chat_member_types="my_chat_member")) # Start polling logger.info("Starting polling...") await app.run_polling() if __name__ == "__main__": asyncio.run(main())
