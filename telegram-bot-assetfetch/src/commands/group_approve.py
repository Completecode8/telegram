import sqlite3 from typing import List from telegram import Update, ChatMemberUpdated from telegram.ext import ContextTypes from src.auth import is_admin, get_config from pathlib import Path DB_PATH = Path(__file__).parent.parent.parent / "config" / "allowed_groups.db" async def groupapprove_command(update: Update, context: ContextTypes.DEFAULT_TYPE): # ... [unchanged above functions] ... async def allapprovedgroup_command(update: Update, context: ContextTypes.DEFAULT_TYPE): # ... [unchanged above functions] ... async def deletethisapprovedgroup_command(update: Update, context: ContextTypes.DEFAULT_TYPE): # ... [unchanged above functions] ... async def my_chat_member_handler(update: Update, context: ContextTypes.DEFAULT_TYPE): """Handler called when bot is added to a new group. Auto-leaves if not allowed, and DMs all admins.""" if not isinstance(update, ChatMemberUpdated): return chat = update.chat new_status = update.my_chat_member.new_chat_member.status # Only trigger on being added/left group if new_status == 'member': group_id = str(chat.id) # Check allowed_groups DB conn = sqlite3.connect(DB_PATH) c = conn.cursor() c.execute("SELECT is_approved FROM groups WHERE group_id=?", (group_id,)) row = c.fetchone() conn.close() if not row or row[0] != 1: # Not approved: leave and notify admins await context.bot.leave_chat(chat.id) config = get_config() admin_ids: List[int] = config.get("admin_ids", []) for admin_id in admin_ids: await context.bot.send_message( chat_id=admin_id, text=f"⚠️ Unauthorized group detected! Group ID: {group_id}\nBot auto-left this group." ) # Optionally, you can log or handle approval request here +++++++ REPLACE
